# 指定用什么用户和组运行nginx
#user  nobody;

# nginx的工作进程个数，通常设置为cpu总核心数-1
worker_processes  1;

# 错误日志，从高到低等级为debug、info、notice、warn、error、crit，不写时默认为error
#error_log  logs/error.log  notice;

# Nginx的pid文件存放位置
#pid        logs/nginx.pid;

# events模块
events {
    # 一个进程可产生多少个工作连接，即Nginx的最大并发访问量
    worker_connections  1024;
}

# http模块
http {
    # 引入媒体资源类型文件mime.types，会在http头上引入相应的类型
    include       mime.types;
	# 默认使用的媒体资源类型，数据流形式
    default_type  application/octet-stream;
	
	# 高效文件传输模式,数据零拷贝
    sendfile        on;
	# 仅当数据包装满数据后发送，避免网络拥塞
    #tcp_nopush     on;

	# 不适用TCP长连接
    #keepalive_timeout  0;
	# 保活时间，进行TCP连接后，65s内无活动关闭长连接，即65s内点击其他连接，复用当前TCP连接，毋须进行三次握手
    keepalive_timeout  65;
	
	# 开启压缩，以提高页面访问速度
    #gzip  on;
	
	# 自定义访问日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

	# 访问日志
    #access_log  logs/access.log  main;

	
	# server模块，即虚拟主机vhost，一个http模块下可有多个server模块，代表不同的服务
    server {
		# 监听端口号，通过端口号来区分不同的服务
        listen       8080;
		# vhost的主机名，可配置成域名
        server_name  localhost;

		# 字符编码
        #charset utf-8;
		
		# 访问日志
        #access_log  logs/host.access.log  main;
		
		# 匹配url中的uri部分
        location /RBAC {
			# 项目根路径，相对目录，以nginx安装目录为基准
			# root   html/RBAC
			# 配置多个location时，用alias替换root
            alias   html/RBAC/;
			# 默认主页
            index  index.html index.htm;
        }
		
		# 反向代理，路径中包含匹配串时，会跳转到相应的地址
		location /prod-api/ {
            proxy_pass   http://localhost:8001/;
        }

		# 错误页
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
